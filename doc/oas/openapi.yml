openapi: 3.0.0
info:
  title: TODO API
  description: |
    TODO API for tecchu11.
  version: 1.0.0
servers:
  - url: http://localhost:{port}
    description: local
    variables:
      port:
        default: '8080'
paths:
  /health:
    get:
      summary: Health check API
      description: Health check endpoint for this app.
      operationId: HealthCheck
      responses:
        '200':
          $ref: '#/components/responses/ResponseHealthCheck'
        '500':
          $ref: '#/components/responses/Response500'
  /tasks:
    get:
      summary: List tasks
      description: List tasks with cursor.
      operationId: ListTasks
      parameters:
        - $ref: '#/components/parameters/Next'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/ResponseTasks'
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
    post:
      summary: Post task
      description: Post task with given request body.
      operationId: PostTask
      requestBody:
        $ref: '#/components/requestBodies/RequestTask'
      responses:
        '200':
          $ref: '#/components/responses/ResponseTaskID'
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
  /tasks/{taskId}:
    get:
      summary: Get task
      description: Get task by id.
      operationId: GetTask
      parameters:
        - $ref: '#/components/parameters/TaskID'
      responses:
        '200':
          $ref: '#/components/responses/ResponseTask'
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
    put:
      summary: Put task
      description: Put task with given request body. If any create task.
      operationId: PutTask
      parameters:
        - $ref: '#/components/parameters/TaskID'
      requestBody:
        $ref: '#/components/requestBodies/RequestTask'
      responses:
        '200':
          $ref: '#/components/responses/ResponseTaskID'
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
components:
  schemas:
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: error message
          example: error message
    TaskContent:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          description: Content of task. Content must be not blank.
          example: go shopping!!
    Simple:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: message
          example: ok
    Task:
      type: object
      required:
        - id
        - content
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          x-go-name: ID
          example: 01928120-055d-7edb-a12a-2d290512266e
        content:
          type: string
          example: go  shopping
        createdAt:
          type: string
          format: date-time
          example: '2024-10-12T23:26:52+09:00'
        updatedAt:
          type: string
          format: date-time
          example: '2024-10-12T23:26:52+09:00'
  parameters:
    Limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        description: pagination limit size.
        format: int32
        minimum: 1
        default: 10
    Next:
      name: next
      in: query
      required: false
      schema:
        type: string
        description: pagination cursor value.
        example: eyJpZCI6MX0K
        default: ''
    TaskID:
      name: taskId
      x-go-name: TaskID
      in: path
      required: true
      schema:
        type: string
        description: ID of task.
        example: 01928120-055d-7edb-a12a-2d290512266e
  requestBodies:
    RequestTask:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskContent'
  responses:
    Response400:
      description: bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Response404:
      description: not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Response500:
      description: internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ResponseHealthCheck:
      description: Health check response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Simple'
    ResponseTask:
      description: get task by id response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
    ResponseTaskID:
      description: saved task id.
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                x-go-name: ID
                description: ID of task.
                example: 01928120-055d-7edb-a12a-2d290512266e
    ResponseTasks:
      description: List of tasks. Items is empty-able.
      content:
        application/json:
          schema:
            type: object
            required:
              - items
              - hasNext
              - next
            properties:
              items:
                type: array
                description: Items of task
                items:
                  $ref: '#/components/schemas/Task'
              hasNext:
                type: boolean
                description: whether has next items.
              next:
                type: string
                description: cursor of next item.
                example: eyJpZCI6IjAxOTIzM2Y1LTQzYzMtNzk4Yi1iMjRkLWVjYmM3NThhZTVmYiJ9
