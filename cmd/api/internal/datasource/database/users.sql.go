// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :execrows
INSERT INTO
	users (
		id,
		sub,
		given_name,
		family_name,
		email,
		email_verified
	)
VALUES
	(?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID            []byte
	Sub           string
	GivenName     string
	FamilyName    string
	Email         string
	EmailVerified bool
}

// CreateUser inserts given user.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Sub,
		arg.GivenName,
		arg.FamilyName,
		arg.Email,
		arg.EmailVerified,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const findUserBySub = `-- name: FindUserBySub :one
SELECT
	id,
	sub,
	given_name,
	family_name,
	email,
	email_verified,
	created_at,
	updated_at
FROM
	users
WHERE
	sub = ?
`

// FindUserBySub finds user with given sub(jwt subject).
func (q *Queries) FindUserBySub(ctx context.Context, sub string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserBySub, sub)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Sub,
		&i.GivenName,
		&i.FamilyName,
		&i.Email,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
