// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package maindb

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :execresult
INSERT INTO
    tasks (id, content)
VALUES
    (?, ?)
`

type CreateTaskParams struct {
	ID      string
	Content string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTask, arg.ID, arg.Content)
}

const findTask = `-- name: FindTask :one
SELECT
    id, content, created_at, updated_at
FROM
    tasks
WHERE
    id = ?
`

func (q *Queries) FindTask(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, findTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :execresult
UPDATE
    tasks
SET
    content = ?
WHERE
    id = ?
`

type UpdateTaskParams struct {
	Content string
	ID      string
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTask, arg.Content, arg.ID)
}
